name: CI

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'replacements/**'
      - 'Dockerfile.demos'
      - 'fly.toml'
      - 'bin/**'
      - '.github/workflows/ci.yml'
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'replacements/**'
      - 'fly.toml'
      - 'Dockerfile.demos'
      - 'bin/**'
      - '.github/workflows/ci.yml'
  schedule:
    # Monday 1PM GMT+8 = Monday 5AM UTC
    - cron: '0 5 * * 1'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      config: ${{ steps.changes.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # @v3.0.2
        id: changes
        with:
          filters: |
            code:
              - 'replacements/**'
              - 'Dockerfile.demos'
            config:
              - 'fly.toml'
              - 'bin/**'
              - '.github/workflows/ci.yml'

  build:
    needs: changes
    if: needs.changes.outputs.code == 'true' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: github-actions-${{ github.sha }}-${{ github.run_id }}-${{github.run_attempt}}
      DOCKER_REPO: registry.fly.io
      APP_NAME: formsg
    outputs:
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout FormSG base
        uses: actions/checkout@v4
        with:
          repository: opengovsg/FormSG
          ref: release-al2

      - name: Checkout demo overlay
        uses: actions/checkout@v4
        with:
          path: demo-overlay

      - name: Apply demo customizations
        run: |
          # Apply replacements
          cp -r demo-overlay/replacements/* . 2>/dev/null || echo "No replacements to copy"

          # Apply OG meta tags
          if [ -f frontend/index.html ]; then
            sed -i 's/__OG_TITLE__/[DEMO] Form @ demos.sg/g' frontend/index.html
            sed -i 's/__OG_DESCRIPTION__/A demo of FormSG on demos.sg/g' frontend/index.html
            sed -i 's/__OG_IMAGE__/og-img-metatag-publicform.png/g' frontend/index.html
          fi

      - name: Set app version
        run: |
          echo "APP_VERSION=$(jq -r .version package.json)-$(echo ${GITHUB_REF##*/})-$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Auth to Fly Docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: flyctl auth docker

      - name: Build and push docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          context: .
          file: ./demo-overlay/Dockerfile.demos
          tags: ${{env.DOCKER_REPO}}/${{env.APP_NAME}}:${{env.APP_VERSION}}

  deploy:
    needs: [changes, build]
    if: always() && (needs.build.result == 'success' || (needs.build.result == 'skipped' && needs.changes.outputs.config == 'true'))
    runs-on: ubuntu-latest
    env:
      APP_NAME: formsg
      DOCKER_REPO: registry.fly.io
    steps:
      - name: Checkout demo overlay
        uses: actions/checkout@v4

      - name: Setup Fly
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          if [ "${{ needs.build.result }}" == "success" ]; then
            # Use newly built image
            flyctl deploy --ha=false --image ${{env.DOCKER_REPO}}/${{env.APP_NAME}}:${{ needs.build.outputs.image_tag }}
          else
            # Deploy with existing image (config changes only)
            flyctl deploy --ha=false
          fi
